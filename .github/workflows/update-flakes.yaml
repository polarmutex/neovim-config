name: update-flakes
on:
  schedule:
    - cron: "50 2 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  generate_matrix:
    runs-on: ubuntu-20.04
    outputs:
      packages: ${{ steps.gen_packages.outputs.packages }}
      checks: ${{ steps.gen_checks.outputs.checks }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Install nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            auto-optimise-store = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      - name: Generate flake.json
        run: |
          nix flake show --json > flake.json
      - id: gen_packages
        run: |
          packages=$(jq -c '.packages."x86_64-linux" | keys' < flake.json)
          printf "::set-output name=packages::%s" "$packages"
      - id: gen_checks
        run: |
          checks=$(jq -c '.checks."x86_64-linux" | keys' < flake.json)
          printf "::set-output name=checks::%s" "$checks"

  update_flake:
    runs-on: ubuntu-20.04
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Install nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            auto-optimise-store = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      #- name: Set up git
      #   run: |
      #    git config user.email gitbot@nobbz.dev
      #    git config user.name "Git Bot"
      - name: Update the flake
        run: nix flake update
      - name: Update the neovim plugins
        run: nix-shell -p npins --run "npins -d plugins update"
      - name: Update the neovim tree-sitter grammars
        run: nix run .#update-treesitter-parsers
      - name: Store flake.lock, npins dependencies
        uses: actions/upload-artifact@v3
        with:
          name: flake_lock
          path: |
            flake.lock
            plugins/*
            tree-sitter-grammars/*

  build_flake:
    runs-on: ubuntu-20.04
    needs: [generate_matrix, update_flake]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        package: ${{fromJson(needs.generate_matrix.outputs.packages)}}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Install nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            auto-optimise-store = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      - name: Set up cachix
        uses: cachix/cachix-action@master # pathsToPush, please update once we have v11!
        with:
          name: polarmutex
          authToken: "${{ secrets.CACHIX_KEY }}"
          pathsToPush: result
      - name: Restore flake.lock and dependencies
        uses: actions/download-artifact@v3
        with:
          name: flake_lock
      - name: Build everything
        run: nix build .#${{ matrix.package }}

  build_checks:
    runs-on: ubuntu-20.04
    needs: [generate_matrix, update_flake]
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        check: ${{fromJson(needs.generate_matrix.outputs.checks)}}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Install nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            auto-optimise-store = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      - name: Set up cachix
        uses: cachix/cachix-action@master # pathsToPush, please update once we have v11!
        with:
          name: polarmutex
          authToken: "${{ secrets.CACHIX_KEY }}"
          skipPush: true
      - name: Restore flake.lock
        uses: actions/download-artifact@v3
        with:
          name: flake_lock
      - name: Build everything
        run: nix build .#checks.x86_64-linux.${{ matrix.check }} --no-link

  check_flake:
    runs-on: ubuntu-20.04
    needs: [update_flake]
    continue-on-error: true
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Install nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            auto-optimise-store = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      - name: Restore flake.lock and dependencies
        uses: actions/download-artifact@v3
        with:
          name: flake_lock
      - name: Build everything
        run: |
          nix flake check --keep-going
  #get-flakes:
  #  runs-on: ubuntu-latest
  #  outputs:
  #    matrix: ${{ steps.get-flakes.outputs.matrix }}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - uses: cachix/install-nix-action@v18
  #      with:
  #        extra_nix_config: |
  #          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
  #          experimental-features = nix-command flakes recursive-nix
  #    - id: get-flakes
  #      run: |
  #        get_flake_inputs() {
  #          nix flake metadata --json \
  #            | jq -c '
  #                .locks.nodes.root.inputs
  #                | {flake: keys}'
  #        }
  #
  #        echo "::set-output name=matrix::$(get_flake_inputs)"

  #flake-update:
  #  name: update-${{ matrix.flake }}
  #  runs-on: ubuntu-latest
  #  needs: get-flakes
  #  strategy:
  #    fail-fast: false
  #    matrix: ${{ fromJson(needs.get-flakes.outputs.matrix) }}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - uses: cachix/install-nix-action@v18
  #      with:
  #        extra_nix_config: |
  #          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
  #          experimental-features = nix-command flakes recursive-nix
  #
  #    - uses: tibdex/github-app-token@v1
  #      id: generate-token
  #      with:
  #        app_id: ${{ secrets.APP_ID }}
  #        private_key: ${{ secrets.APP_KEY }}
  #
  #    - uses: cpcloud/flake-update-action@v1.0.4
  #      with:
  #        dependency: ${{ matrix.flake }}
  #        github-token: ${{ secrets.GITHUB_TOKEN }}
  #        pull-request-token: ${{ steps.generate-token.outputs.token }}
  #        pull-request-author: "polarmutex[bot] <polarmutex[bot]@users.noreply.github.com>"
  #        pull-request-labels: dependencies,autorebase:opt-in
  #        automerge: true
  #        delete-branch: true
