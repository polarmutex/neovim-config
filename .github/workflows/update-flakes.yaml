name: update-flakes
on:
  schedule:
    - cron: "50 7 * * *"
  workflow_dispatch:

jobs:

  update_flake:
    runs-on: ubuntu-20.04
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Install nix
        uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            auto-optimise-store = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org https://polarmutex.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= polarmutex.cachix.org-1:kUFH4ftZAlTrKlfFaKfdhKElKnvynBMOg77XRL2pc08=
          install_url: https://releases.nixos.org/nix/nix-2.12.0/install
      #- name: Set up git
      #   run: |
      #    git config user.email gitbot@nobbz.dev
      #    git config user.name "Git Bot"
      - name: Update the flake
        run: nix flake update
      - name: Update the neovim plugins
        run: nix run .#update-neovim-plugins
      - name: Update the neovim tree-sitter grammars
        run: nix run .#update-treesitter-parsers
      - name: Store flake.lock, npins dependencies
        uses: actions/upload-artifact@v3
        with:
          name: flake_lock
          path: |
            flake.lock
            plugins/*
            tree-sitter-grammars/*

  push_update:
    runs-on: ubuntu-20.04
    permissions: write-all
    needs: [update_flake]
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Restore flake.lock and dependencies
        uses: actions/download-artifact@v3
        with:
          name: flake_lock

      - uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_KEY }}

      - name: Create a pull request to update dependencies
        id: create_pr
        uses: peter-evans/create-pull-request@v4
        with:
          commit-message: "chore(dependencies): update"
          branch: "update_flake_dependencies"
          delete-branch: true
          author: "polarmutex[bot] <polarmutex[bot]@users.noreply.github.com>"
          signoff: false
          title: "chore(dependencies): Update dependencies"
          token: ${{ steps.generate-token.outputs.token }}
          body: ""
          labels: dependencies,autorebase:opt-in

      - name: Set the PR to automerge
        if: ${{ steps.create_pr.outputs.pull-request-operation == 'created' }}
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.create_pr.outputs.pull-request-number }}
          merge-method: "rebase"
      #- name: Set up git
      #  run: |
      #    git config user.email gitbot@nobbz.dev
      #    git config user.name "Git Bot"
      #- name: Create and merge PR
      #  run: |
      #    git switch -c updates-${{ github.run_id }}
      #    git commit -am "flake.lock: Update"
      #    git push -u origin updates-${{ github.run_id }}
      #    PR=$(gh pr create \
      #      --assignee NobbZ \
      #      --base main \
      #      --body "Automatic flake update on $(date -I)" \
      #      --fill \
      #      --label bot \
      #      --title "Auto update $(date -I)")
      #    gh pr merge $PR --merge --delete-branch
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #get-flakes:
  #  runs-on: ubuntu-latest
  #  outputs:
  #    matrix: ${{ steps.get-flakes.outputs.matrix }}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - uses: cachix/install-nix-action@v18
  #      with:
  #        extra_nix_config: |
  #          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
  #          experimental-features = nix-command flakes recursive-nix
  #    - id: get-flakes
  #      run: |
  #        get_flake_inputs() {
  #          nix flake metadata --json \
  #            | jq -c '
  #                .locks.nodes.root.inputs
  #                | {flake: keys}'
  #        }
  #
  #        echo "::set-output name=matrix::$(get_flake_inputs)"

  #flake-update:
  #  name: update-${{ matrix.flake }}
  #  runs-on: ubuntu-latest
  #  needs: get-flakes
  #  strategy:
  #    fail-fast: false
  #    matrix: ${{ fromJson(needs.get-flakes.outputs.matrix) }}
  #  steps:
  #    - uses: actions/checkout@v3
  #    - uses: cachix/install-nix-action@v18
  #      with:
  #        extra_nix_config: |
  #          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
  #          experimental-features = nix-command flakes recursive-nix
  #
  #    - uses: tibdex/github-app-token@v1
  #      id: generate-token
  #      with:
  #        app_id: ${{ secrets.APP_ID }}
  #        private_key: ${{ secrets.APP_KEY }}
  #
  #    - uses: cpcloud/flake-update-action@v1.0.4
  #      with:
  #        dependency: ${{ matrix.flake }}
  #        github-token: ${{ secrets.GITHUB_TOKEN }}
  #        pull-request-token: ${{ steps.generate-token.outputs.token }}
  #        pull-request-author: "polarmutex[bot] <polarmutex[bot]@users.noreply.github.com>"
  #        pull-request-labels: dependencies,autorebase:opt-in
  #        automerge: true
  #        delete-branch: true
